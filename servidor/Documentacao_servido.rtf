{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red0\green128\blue0;\red0\green32\blue128;\red128\green0\blue0;\red96\green64\blue32;\red255\green255\blue255;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}{\s4 heading 4;}}
{\*\generator Riched20 10.0.21387}\viewkind4\uc1 
\pard\widctlpar\sa60\qc\f0\fs24\par
\par
\par
\par
\par
\par
\par

\pard\widctlpar\sb240\sa60\qc\kerning28\b\fs32 Banco Servidor\par

\pard\widctlpar\sa60\qc\kerning0\b0\fs24\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
AUTHOR\par
Vers\'e3o 1.0\par
Segunda, 24 de Maio de 2021 \par

\pard\keepn\widctlpar\s1\sb240\sa60\page\page\kerning36\b\fs36 Sum\'e1rio\par

\pard\kerning0\b0\f1\fs24\par
Table of contents\par
\par
\par
\par

\pard\keepn\s1\sb240\sa60\kerning36\b\f0\fs36 <em>Namespaces</em>\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\fs28 Lista de Namespaces\par

\pard\kerning0\b0\f1\fs22 Esta \'e9 a lista de todos os Namespaces com suas respectivas descri\'e7\'f5es:\fs24\par

\pard\widctlpar\li360\sb27\sa27\tqr\tldot\tx8640\b\fs20 account \b0  \tab pagenum\par
\b bank \b0  \tab pagenum\par
\b client \b0  \tab pagenum\par
\b extract \b0  \tab pagenum\par
\b serve \b0  \tab pagenum\par
\par

\pard\fs24\par

\pard\keepn\s1\sb240\sa60\kerning36\b\f0\fs36\'cdndice dos Componentes\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\fs28 Lista de Classes\par

\pard\kerning0\b0\f1\fs22 Aqui est\'e3o as classes, estruturas, uni\'f5es e interfaces e suas respectivas descri\'e7\'f5es:\fs24\par

\pard\widctlpar\li360\sb27\sa27\tqr\tldot\tx8640\b\fs20 account.Account \b0  \tab pagenum\par
\b bank.Bank \b0  \tab pagenum\par
\b client.Client \b0  \tab pagenum\par
\b serve.conectServ \b0  \tab pagenum\par
\b extract.Extract \b0  \tab pagenum\par
\par

\pard\fs24\par

\pard\keepn\s1\sb240\sa60\kerning36\b\f0\fs36\'cdndice dos Arquivos\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\fs28 Lista de Arquivos\par

\pard\kerning0\b0\f1\fs22 Esta \'e9 a lista de todos os arquivos e suas respectivas descri\'e7\'f5es:\fs24\par

\pard\widctlpar\li360\sb27\sa27\tqr\tldot\tx8640\b\fs20 E:/2020.2 quarentena/github/Projeto_PooII/servidor/account.py \b0  \tab pagenum\par
\b E:/2020.2 quarentena/github/Projeto_PooII/servidor/bank.py \b0  \tab pagenum\par
\b E:/2020.2 quarentena/github/Projeto_PooII/servidor/client.py \b0  \tab pagenum\par
\b E:/2020.2 quarentena/github/Projeto_PooII/servidor/extract.py \b0  \tab pagenum\par
\b E:/2020.2 quarentena/github/Projeto_PooII/servidor/serve.py \b0  \tab pagenum\par
\par

\pard\fs24\par

\pard\keepn\s1\sb240\sa60\kerning36\b\f0\fs36 <em>Namespace</em>\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\fs28 Ref\'eancia do Namespace account\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b Account\b0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Descri\'e7\'e3o detalhada\par

\pard\widctlpar\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\f2\fs16 class Account: Essa classe \'e9 utilizada a fim de cadastrar a conta que o cliente vai utilizar no banco.\par

\pard\widctlpar\sb30\sa60\qj\f1\fs22  \par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Ref\'eancia do Namespace bank\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b Bank\b0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Descri\'e7\'e3o detalhada\par

\pard\widctlpar\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\f2\fs16 Class Bank: local utilizada para armazenar e verificar informa\'e7\'e3o\par
\par
Metodos criados\par
-----------------\par
    add_client:\par
        adicionar o cliente em um dicionario\par
\par
    get_client\par
        verificar se j\'e1 existe algum cliente utilizando o cpf informado\par
\par
    add_account\par
        adiciona uma conta no dicionario e j\'e1 a vincula em um cliente\par
\par
    get_account\par
        verifica se o numero da conta j\'e1 est\'e1 sendo utilizado\par
\par
    get_account_2\par
        verifica se o numero da conta j\'e1 est\'e1 sendo utilizado\par
\par
    login\par
        verifica se a senha e o cpf est\'e1 vinculada ao banco\par

\pard\widctlpar\sb30\sa60\qj\f1\fs22  \par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Ref\'eancia do Namespace client\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b Client\b0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Descri\'e7\'e3o detalhada\par

\pard\widctlpar\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\f2\fs16 Class Client: Essa classe \'e9 utilizada com o intuito de cadastrar os cliente\par

\pard\widctlpar\sb30\sa60\qj\f1\fs22  \par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Ref\'eancia do Namespace extract\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b Extract\b0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Descri\'e7\'e3o detalhada\par

\pard\widctlpar\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\f2\fs16 Class Extract: Essa classe \'e9 utilizada para o extrato da conta\par

\pard\widctlpar\sb30\sa60\qj\f1\fs22  \par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Ref\'eancia do Namespace serve\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b conectServ\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 Vari\'e1veis\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 string \b host\b0  = 'localhost'\par
{\pntext\f1 1)\tab}int \b port\b0  = 8000\par
{\pntext\f1 2)\tab}\b serv\b0  = \b conectServ\b0 ()\par
{\pntext\f1 3)\tab}bool \b runing\b0  = True\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Descri\'e7\'e3o detalhada\par

\pard\widctlpar\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\f2\fs16 Classe Servidor: Para conectar o servidor as tela e informa\'e7\'f5es do cliente\par
\par
Metodos criados\par
-----------------\par
    connectionServ:\par
        Utilizado para ligar o servidor e aguarda alguma conex\'e3o com o cliente para iniciarmos\par
\par
    communication:\par
        Serve para enviar e receber dados entre o cliente e servidor\par
\par
    servClose:\par

\pard\widctlpar\sb30\sa60\qj         Utilizado para fechar o servidor\f1\fs22  \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Vari\'e1veis\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 string serve.host = 'localhost'\par
int serve.port = 8000\par
Abool serve.runing = True\par
serve.serv = conectServ()\par

\pard\keepn\s1\sb240\sa60\kerning36\fs36 Classes\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\fs28 Refer\'eancia da Classe account.Account\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Membros P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 def \b __init__\b0  (self, \b number\b0 , client, \b balance\b0 , \b password\b0 , \b limit\b0 =1000.0)\par
{\pntext\f1 1)\tab}def \b number\b0  (self)\par
{\pntext\f1 2)\tab}def \b holder\b0  (self)\par
{\pntext\f1 3)\tab}def \b balance\b0  (self)\par
{\pntext\f1 4)\tab}def \b limit\b0  (self)\par
{\pntext\f1 5)\tab}def \b password\b0  (self)\par
{\pntext\f1 6)\tab}def \b extract\b0  (self)\par
{\pntext\f1 7)\tab}def \b withdraw\b0  (self, value)\par
{\pntext\f1 8)\tab}def \b deposit\b0  (self, value)\par
{\pntext\f1 9)\tab}def \b transfer\b0  (self, destiny, value)\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 Membros P\'fablicos Est\'e1ticos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 def \b get_total_accounts\b0  ()\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Construtores e Destrutores\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def account.Account.__init__ (  \i self\i0 ,   \i number\i0 ,   \i client\i0 ,   \i balance\i0 ,   \i password\i0 ,   \i limit\i0  = \f2 1000.0\f0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             Essa classe \'e9 utilizada a fim de cadastrar a conta que o cliente vai utilizar no banco.\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 13     \cf1 def \cf0 __init__(self, number, client, balance, password, limit=1000.0):\par
14         \cf2 '''\cf0\par
15 \cf2         DESCRIPTION:\cf0\par
16 \cf2             Essa classe \'e9 utilizada a fim de cadastrar a conta que o cliente vai utilizar no banco.\cf0\par
17 \cf2         '''\cf0\par
18         self._number = number\par
19         self._holder = client\par
20         self._balance = balance\par
21         self._limit = limit\par
22         self._password = password\par
23         self._extract = Extract()\par
24         Account._total_accounts += 1\par
25 \par
26 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Fun\'e7\'f5es membros\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def account.Account.balance (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 36     \cf1 def \cf0 balance(self):\par
37         \cf1 return\cf0  self._balance\par
38     \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.deposit (  \i self\i0 ,   \i value\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         :param value: float\par
            valor do tipo float\par
        :raise:\par
            aceita valores do tipo inteiro e flutuante\par
\par
        :return:\par
            informa uma mensagem, avisando que o deposito foi um sucesso.\par

\pard\widctlpar\li360\sb30\sa60\qj             informa o restante do saldo presente na sua carteira ap\'f3s o termino da opera\'e7\'e3o.\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 72     \cf1 def \cf0 deposit(self, value):\par
73         \cf2 '''\cf0\par
74 \cf2         :param value: float\cf0\par
75 \cf2             valor do tipo float\cf0\par
76 \cf2         :raise:\cf0\par
77 \cf2             aceita valores do tipo inteiro e flutuante\cf0\par
78 \par
79 \cf2         :return:\cf0\par
80 \cf2             informa uma mensagem, avisando que o deposito foi um sucesso.\cf0\par
81 \cf2             informa o restante do saldo presente na sua carteira ap\'f3s o termino da opera\'e7\'e3o.\cf0\par
82 \cf2         '''\cf0\par
83         \cf1 if\cf0  value < 0:\par
84             \cf1 return\cf0  \cf2 'Valor depositado n\'e3o pode ser negativo!'\cf0\par
85         \cf1 else\cf0 :\par
86             self._balance += value\par
87             date = datetime.datetime.now().strftime(\cf2 '%d/%m/%Y %H:%M:%S'\cf0 )\par
88             self._extract.add_extract(\cf2 ' - Depositou \{\} em \{\}\\n'\cf0 .format(value, date))\par
89             \cf1 return\cf0  \cf2 'Deposito realizado com sucesso!\\nSaldo da conta = \{:.2f\}'\cf0 .format(self.balance)\par
90 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.extract (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 48     \cf1 def \cf0 extract(self):\par
49         \cf1 return\cf0  self._extract\par
50 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.get_total_accounts ()\f2 [static]\f0\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 120     \cf1 def \cf0 get_total_accounts():\par
121         \cf1 return\cf0  Account._total_accounts\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.holder (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 32     \cf1 def \cf0 holder(self):\par
33         \cf1 return\cf0  self._holder\par
34 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.limit (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 40     \cf1 def \cf0 limit(self):\par
41         \cf1 return\cf0  self._limit\par
42 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.number (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 28     \cf1 def \cf0 number(self):\par
29         \cf1 return\cf0  self._number\par
30     \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.password (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 44     \cf1 def \cf0 password(self):\par
45         \cf1 return\cf0  self._password\par
46 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.transfer (  \i self\i0 ,   \i destiny\i0 ,   \i value\i0 )\par

\pard\widctlpar\li360\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         :param destiny: str\par
            valor do tipo str\par
        :param value: float\par
            valor do tipo float\par
        :raise:\par
            aceita valores de tipo str\par
            aceita valores do tipo inteiro e flutuante\par
\par
        :return:\par

\pard\widctlpar\li360\sb30\sa60\qj             informa uma mensagem, avisando que a transferencia foi um sucesso.\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 91     \cf1 def \cf0 transfer(self, destiny, value):\par
92         \cf2 '''\cf0\par
93 \cf2         :param destiny: str\cf0\par
94 \cf2             valor do tipo str\cf0\par
95 \cf2         :param value: float\cf0\par
96 \cf2             valor do tipo float\cf0\par
97 \cf2         :raise:\cf0\par
98 \cf2             aceita valores de tipo str\cf0\par
99 \cf2             aceita valores do tipo inteiro e flutuante\cf0\par
100 \par
101 \cf2         :return:\cf0\par
102 \cf2             informa uma mensagem, avisando que a transferencia foi um sucesso.\cf0\par
103 \cf2         '''\cf0\par
104         \cf1 if\cf0  value < 0:\par
105             \cf1 return\cf0  \cf2 'Valor a ser transferido n\'e3o pode ser negativo!'\cf0\par
106         \cf1 elif\cf0  value > self._balance + self._limit:\par
107             \cf1 return\cf0  \cf2 'Valor indispon\'edvel para transferencia!'\cf0\par
108         \cf1 else\cf0 :\par
109             self._balance -= value\par
110             destiny._balance += value\par
111             date = datetime.datetime.now().strftime(\cf2 '%d/%m/%Y %H:%M:%S'\cf0 )\par
112             \cf3 # self._extract.add_extract(' - Sacou \{\} em \{\}\\n'.format(value, date))\cf0\par
113             self._extract.add_extract(\cf2 ' - Transferiu \{:.2f\} para conta \{\} em \{\}\\n'\cf0 .format(value, destiny._number, date))\par
114             \cf3 # destiny._extract.add_extract(' - Depositou \{\} em \{\}\\n'.format(value, date))\cf0\par
115             destiny._extract.add_extract(\cf2 ' - Recebeu \{:.2f\} por transfer\'eancia da conta \{\} em \{\}\\n'\cf0 .format(value, self._number, date))\par
116             \cf1 return\cf0  \cf2 'Transferencia realizada com sucesso!'\cf0\par
117 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def account.Account.withdraw (  \i self\i0 ,   \i value\b0\i0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         :param value: float\par
            valor do tipo float\par
        :raise:\par
            aceita valores do tipo inteiro e flutuante\par
\par
        :return:\par
            informa uma mensagem, avisando que a saque foi um sucesso.\par

\pard\widctlpar\li360\sb30\sa60\qj             informa o restante do saldo presente na sua carteira ap\'f3s o termino da opera\'e7\'e3o.\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 51     \cf1 def \cf0 withdraw(self, value):\par
52         \cf2 '''\cf0\par
53 \cf2         :param value: float\cf0\par
54 \cf2             valor do tipo float\cf0\par
55 \cf2         :raise:\cf0\par
56 \cf2             aceita valores do tipo inteiro e flutuante\cf0\par
57 \par
58 \cf2         :return:\cf0\par
59 \cf2             informa uma mensagem, avisando que a saque foi um sucesso.\cf0\par
60 \cf2             informa o restante do saldo presente na sua carteira ap\'f3s o termino da opera\'e7\'e3o.\cf0\par
61 \cf2         '''\cf0\par
62         \cf1 if\cf0  value < 0:\par
63             \cf1 return\cf0  \cf2 'Valor sacado n\'e3o pode ser negativo!'\cf0\par
64         \cf1 elif\cf0  value > self._balance + self._limit:\par
65             \cf1 return\cf0  \cf2 'Valor indispon\'edvel para saque!'\cf0\par
66         \cf1 else\cf0 :\par
67             self._balance -= value\par
68             date = datetime.datetime.now().strftime(\cf2 '%d/%m/%Y %H:%M:%S'\cf0 )\par
69             self._extract.add_extract(\cf2 ' - Sacou \{\} em \{\}\\n'\cf0 .format(value, date))\par
70             \cf1 return\cf0  \cf2 'Saque realizado com sucesso!\\nSaldo restante = \{:.2f\}'\cf0 .format(self._balance)\par
71 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s4\sb240\sa60 A documenta\'e7\'e3o para essa classe foi gerada a partir do seguinte arquivo:\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li720\b0\f1 E:/2020.2 quarentena/github/Projeto_PooII/servidor/\b account.py\b0\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\par

\pard\b0\f1\fs24\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia da Classe bank.Bank\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Membros P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 def \b __init__\b0  (self)\par
{\pntext\f1 1)\tab}def \b add_client\b0  (self, client)\par
{\pntext\f1 2)\tab}def \b get_client\b0  (self, cpf)\par
{\pntext\f1 3)\tab}def \b add_account\b0  (self, account)\par
{\pntext\f1 4)\tab}def \b get_account\b0  (self, number)\par
{\pntext\f1 5)\tab}def \b get_account_2\b0  (self)\par
{\pntext\f1 6)\tab}def \b login\b0  (self, cpf, password)\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 Atributos P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\f1\fs20 logCPF\b0\par
{\pntext\f1 1)\tab}\b logNumber\b0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Construtores e Destrutores\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def bank.Bank.__init__ (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 31     \cf1 def \cf0 __init__(self):\par
32         self._clients = \{\}\par
33         self._accounts = \{\}\par
34         self.logCPF = \cf4 None\cf0\par
35         self.logNumber = \cf4 None\cf0\par
36 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Fun\'e7\'f5es membros\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def bank.Bank.add_account (  \i self\i0 ,   \i account\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             adiciona uma conta no dicionario e j\'e1 a vincula em um cliente\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 54     \cf1 def \cf0 add_account(self, account):\par
55         \cf2 '''\cf0\par
56 \cf2         DESCRIPTION:\cf0\par
57 \cf2             adiciona uma conta no dicionario e j\'e1 a vincula em um cliente\cf0\par
58 \cf2         '''\cf0\par
59         self._accounts[account.number] = account\par
60 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def bank.Bank.add_client (  \i self\i0 ,   \i client\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             Essa fun\'e7\'e3o serve para adicionar cliente no banco e salvar num dicionario com o seu cpf\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 37     \cf1 def \cf0 add_client(self, client):\par
38         \cf2 '''\cf0\par
39 \cf2         DESCRIPTION:\cf0\par
40 \cf2             Essa fun\'e7\'e3o serve para adicionar cliente no banco e salvar num dicionario com o seu cpf\cf0\par
41 \cf2         '''\cf0\par
42         self._clients[client.cpf] = client\par
43 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def bank.Bank.get_account (  \i self\i0 ,   \i number\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             verifica se o numero da conta j\'e1 est\'e1 sendo utilizado\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 61     \cf1 def \cf0 get_account(self, number):\par
62         \cf2 '''\cf0\par
63 \cf2         DESCRIPTION:\cf0\par
64 \cf2             verifica se o numero da conta j\'e1 est\'e1 sendo utilizado\cf0\par
65 \cf2         '''\cf0\par
66         \cf1 if\cf0  number \cf1 in\cf0  self._accounts:\par
67             \cf1 return\cf0  self._accounts[number]\par
68         \cf1 else\cf0 :\par
69             \cf1 return\cf0  \cf4 None\cf0\par
70     \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def bank.Bank.get_account_2 (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\par
\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             verifica se o numero da conta j\'e1 est\'e1 sendo utilizado\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 71     \cf1 def \cf0 get_account_2(self):\par
72         \cf2 '''\cf0\par
73 \cf2         DESCRIPTION:\cf0\par
74 \cf2             verifica se o numero da conta j\'e1 est\'e1 sendo utilizado\cf0\par
75 \cf2         '''\cf0\par
76         \cf1 if\cf0  self.logNumber \cf1 in\cf0  self._accounts:\par
77             \cf1 return\cf0  self._accounts[self.logNumber]\par
78         \cf1 else\cf0 :\par
79             \cf1 return\cf0  \cf4 None\cf0\par
80 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def bank.Bank.get_client (  \i self\i0 ,   \i cpf\i0 )\par

\pard\widctlpar\li360\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             Verificar se j\'e1 existe algum cliente utilizando o cpf informado\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 44     \cf1 def \cf0 get_client(self, cpf):\par
45         \cf2 '''\cf0\par
46 \cf2         DESCRIPTION:\cf0\par
47 \cf2             Verificar se j\'e1 existe algum cliente utilizando o cpf informado\cf0\par
48 \cf2         '''\cf0\par
49         \cf1 if\cf0  cpf \cf1 in\cf0  self._clients:\par
50             \cf1 return\cf0  self._clients[cpf]\par
51         \cf1 else\cf0 :\par
52             \cf1 return\cf0  \cf4 None\cf0\par
53     \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def bank.Bank.login (  \i self\i0 ,   \i cpf\i0 ,   \i password\i0 )\par

\pard\widctlpar\li360\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             verifica se a senha e o cpf est\'e1 vinculada ao banco\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 81     \cf1 def \cf0 login(self, cpf, password):\par
82         \cf2 '''\cf0\par
83 \cf2         DESCRIPTION:\cf0\par
84 \cf2             verifica se a senha e o cpf est\'e1 vinculada ao banco\cf0\par
85 \cf2         '''\cf0\par
86         \cf1 for\cf0  key, a \cf1 in\cf0  self._accounts.items():\par
87             \cf1 if\cf0  a.holder.cpf == cpf \cf1 and\cf0  a.password == password:\par
88                 self.logCPF = a.holder.cpf\par
89                 self.logNumber = a.number\par
90                 \cf1 return\cf0  a\par
91         \cf1 return\cf0  \cf4 None\cf0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Atributos\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 bank.Bank.logCPF\par
Bbank.Bank.logNumber\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\par

\pard\keepn\widctlpar\s4\sb240\sa60 A documenta\'e7\'e3o para essa classe foi gerada a partir do seguinte arquivo:\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li720\b0\f1 E:/2020.2 quarentena/github/Projeto_PooII/servidor/\b bank.py\b0\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\par

\pard\b0\f1\fs24\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia da Classe client.Client\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Membros P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 def \b __init__\b0  (self, \b name\b0 , \b surname\b0 , \b cpf\b0 )\par
{\pntext\f1 1)\tab}def \b name\b0  (self)\par
{\pntext\f1 2)\tab}def \b surname\b0  (self)\par
{\pntext\f1 3)\tab}def \b cpf\b0  (self)\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Construtores e Destrutores\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def client.Client.__init__ (  \i self\i0 ,   \i name\i0 ,   \i surname\i0 ,   \i cpf\i0 )\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             Essa classe \'e9 utilizada com o intuito de cadastrar os cliente\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 9     \cf1 def \cf0 __init__(self, name, surname, cpf):\par
10         \cf2 '''\cf0\par
11 \cf2         DESCRIPTION:\cf0\par
12 \cf2             Essa classe \'e9 utilizada com o intuito de cadastrar os cliente\cf0\par
13 \cf2         '''\cf0\par
14         self._name = name\par
15         self._surname = surname\par
16         self._cpf = cpf\par
17 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Fun\'e7\'f5es membros\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def client.Client.cpf (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 27     \cf1 def \cf0 cpf(self):\par
28         \cf1 return\cf0  self._cpf\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def client.Client.name (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 19     \cf1 def \cf0 name(self):\par
20         \cf1 return\cf0  self._name\par
21 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def client.Client.surname (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 23     \cf1 def \cf0 surname(self):\par
24         \cf1 return\cf0  self._surname\par
25 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s4\sb240\sa60 A documenta\'e7\'e3o para essa classe foi gerada a partir do seguinte arquivo:\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li720\b0\f1 E:/2020.2 quarentena/github/Projeto_PooII/servidor/\b client.py\b0\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\par

\pard\b0\f1\fs24\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia da Classe serve.conectServ\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Membros P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 def \b __init__\b0  (self)\par
{\pntext\f1 1)\tab}def \b connectionServ\b0  (self)\par
{\pntext\f1 2)\tab}def \b communication\b0  (self)\par
{\pntext\f1 3)\tab}def \b servClose\b0  (self)\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 Atributos P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\f1\fs20 bank\b0\par
{\pntext\f1 1)\tab}\b addr\b0\par
{\pntext\f1 2)\tab}\b servSocket\b0\par
{\pntext\f1 3)\tab}\b connection\b0\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Construtores e Destrutores\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def serve.conectServ.__init__ (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 29     \cf1 def \cf0 __init__(self):\par
30         self.bank = Bank()\par
31         self.addr = \cf4 None\cf0\par
32         self.servSocket = \cf4 None\cf0\par
33         self.connection = \cf4 None\cf0\par
34 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Fun\'e7\'f5es membros\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def serve.conectServ.communication (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             fun\'e7\'e3o criada para enviar e receber dados entre o cliente e servidor\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 50     \cf1 def \cf0 communication(self):\par
51         \cf2 '''\cf0\par
52 \cf2         DESCRIPTION:\cf0\par
53 \cf2             fun\'e7\'e3o criada para enviar e receber dados entre o cliente e servidor\cf0\par
54 \cf2         '''\cf0\par
55         dados = self.connection.recv(1024).decode()\par
56         message = dados.split(\cf2 '\'cf\'80\'e2\'88\'9b'\cf0 )\par
57         \cf1 if\cf0  message[0] == \cf2 'add_client'\cf0 :\par
58             c = Client(message[1], message[2], message[3])\par
59             \cf1 if\cf0  \cf1 not\cf0  self.bank.get_client(message[3]):\par
60                 a = Account(message[4], c, float(message[5]), message[6])\par
61                 \cf1 if\cf0  \cf1 not\cf0  self.bank.get_account(message[4]):\par
62                     self.bank.add_client(c)\par
63                     self.bank.add_account(a)\par
64                     print(\cf2 'Conta Criada Com Sucesso!'\cf0 )\par
65                     self.connection.send(\cf2 'True'\cf0 .encode())\par
66                 \cf1 else\cf0 :\par
67                     print(\cf2 'N\'famero de Conta Em Uso!'\cf0 )\par
68                     self.connection.send(\cf2 'False1'\cf0 .encode())\par
69             \cf1 else\cf0 :\par
70                 print(\cf2 'CPF Em Uso!'\cf0 )\par
71                 self.connection.send(\cf2 'False2'\cf0 .encode())\par
72 \par
73         \cf1 elif\cf0  message[0] == \cf2 'authenticated'\cf0 : \cf3 # Logar\cf0\par
74             authenticated = self.bank.login(message[1], message[2])  \cf3 # pelo numero da conta\cf0\par
75             \cf1 if\cf0  authenticated:\par
76                 print(\cf2 'Login Realizado Sucesso'\cf0 )\par
77                 self.connection.send(\cf2 'True'\cf0 .encode())\par
78             \cf1 else\cf0 :\par
79                 print(\cf2 'Login N\'e3o Realizado!'\cf0 )\par
80                 self.connection.send(\cf2 'Conex\'e3o inv\'e1lida!'\cf0 .encode())\par
81 \par
82         \cf1 elif\cf0  message[0] == \cf2 'menuName'\cf0 : \cf3 # Mostrar o nome do usuario na tela de menu\cf0\par
83             account = self.bank.get_account_2()\par
84             name = \cf2 '\{\}'\cf0 .format(account.holder.name.capitalize() + \cf2 ' '\cf0  + account.holder.surname.capitalize())\par
85             self.connection.send(name.encode())\par
86 \par
87         \cf1 elif\cf0  message[0] == \cf2 'menuBalance'\cf0 : \cf3 # Depositar\cf0\par
88             account = self.bank.get_account_2()\par
89             balance = \cf2 '\{\}'\cf0 .format(str(account.balance))\par
90             self.connection.send(balance.encode())\par
91 \par
92         \cf1 elif\cf0  message[0] == \cf2 'withdraw'\cf0 : \cf3 # Sacar\cf0\par
93             account = self.bank.get_account_2()\par
94             \cf1 if\cf0  account.withdraw(float(message[1])):\par
95                 print(\cf2 'Saque Realizado Com Sucesso!'\cf0 )\par
96                 self.connection.send(\cf2 'True'\cf0 .encode())\par
97             \cf1 else\cf0 :\par
98                 print(\cf2 'Erro No Saque!'\cf0 )\par
99                 self.connection.send(\cf2 'Erro no saque'\cf0 .encode())\par
100 \par
101         \cf1 elif\cf0  message[0] == \cf2 'deposit'\cf0 : \cf3 # Depositar\cf0\par
102             account = self.bank.get_account_2()\par
103             account.deposit(float(message[1]))\par
104             print(\cf2 'Deposito Realizado com Sucesso!'\cf0 )\par
105             self.connection.send(\cf2 'True'\cf0 .encode())\par
106 \par
107         \cf1 elif\cf0  message[0] == \cf2 'transfer'\cf0 : \cf3 # Transferir\cf0\par
108             account_origin = self.bank.get_account_2()\par
109             account_destiny = self.bank.get_account(message[1])\par
110             \cf1 if\cf0  account_destiny:\par
111                 account_origin.transfer(account_destiny, float(message[2]))\par
112                 print(\cf2 'Transfer\'eancia Realizada Com Sucesso!'\cf0 )\par
113                 self.connection.send(\cf2 'True'\cf0 .encode())\par
114             \cf1 else\cf0 :\par
115                 print(\cf2 'N\'famero de Conta N\'e3o Encontrado!'\cf0 )\par
116                 self.connection.send(\cf2 'False'\cf0 .encode())\par
117 \par
118         \cf1 elif\cf0  message[0] == \cf2 'extract'\cf0 : \cf3 # Extrato\cf0\par
119             account = self.bank.get_account_2()\par
120             extracts = account.extract.display_extract()\par
121             print(\cf2 'Tirou Extrato!'\cf0 )\par
122             self.connection.send(extracts.encode())\par
123             \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def serve.conectServ.connectionServ (  \i self\i0 )\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16             DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj                 fun\'e7\'e3o utilizada ligar o servidor e aguarda alguma conex\'e3o com o cliente para iniciarmos\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 35     \cf1 def \cf0 connectionServ(self):\par
36         \cf2 '''\cf0\par
37 \cf2             DESCRIPTION:\cf0\par
38 \cf2                 fun\'e7\'e3o utilizada ligar o servidor e aguarda alguma conex\'e3o com o cliente para iniciarmos\cf0\par
39 \cf2         '''\cf0\par
40         self.addr = (host, port)\par
41         self.servSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\par
42         self.servSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\par
43         self.servSocket.bind(self.addr)\par
44         self.servSocket.listen(10)\par
45         print(\cf2 'Aguardando conex\'e3o...'\cf0 )\par
46 \par
47         self.connection, _ = self.servSocket.accept()\par
48         print(\cf2 'Conectado!'\cf0 )\par
49 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def serve.conectServ.servClose (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             Utilizado para fechar o servidor\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 124     \cf1 def \cf0 servClose(self):\par
125         \cf2 '''\cf0\par
126 \cf2         DESCRIPTION:\cf0\par
127 \cf2             Utilizado para fechar o servidor\cf0\par
128 \cf2         '''\cf0\par
129         self.servSocket.close()\par
130         print(\cf2 "Server finalizado."\cf0 )\par
131 \par
132 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Atributos\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 serve.conectServ.addr\par
serve.conectServ.bank\par
serve.conectServ.connection\par
serve.conectServ.servSocket\par
A documenta\'e7\'e3o para essa classe foi gerada a partir do seguinte arquivo:\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li720\b0\f1 E:/2020.2 quarentena/github/Projeto_PooII/servidor/\b serve.py\b0\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\par

\pard\b0\f1\fs24\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia da Classe extract.Extract\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Membros P\'fablicos\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 def \b __init__\b0  (self)\par
{\pntext\f1 1)\tab}def \b openDate\b0  (self)\par
{\pntext\f1 2)\tab}def \b add_extract\b0  (self, str)\par
{\pntext\f1 3)\tab}def \b display_extract\b0  (self)\par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\fs24\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0 Construtores e Destrutores\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def extract.Extract.__init__ (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 10     \cf1 def \cf0 __init__(self):\par
11         self._open_date = datetime.datetime.now().strftime(\cf2 '%d/%m/%Y %H:%M:%S'\cf0 ) \cf3 # armazena o data e hora que a conta foi criada\cf0\par
12         self._extract = []\par
13 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s3\sb240\sa60\fs24 Fun\'e7\'f5es membros\par

\pard\keepn\widctlpar\s4\sb240\sa60\fs20 def extract.Extract.add_extract (  \i self\i0 ,   \i str\i0 )\par

\pard\widctlpar\li360\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             adiciona uma transi\'e7\'e3o na lista\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 18     \cf1 def \cf0 add_extract(self, str):\par
19         \cf2 '''\cf0\par
20 \cf2         DESCRIPTION:\cf0\par
21 \cf2             adiciona uma transi\'e7\'e3o na lista\cf0\par
22 \cf2         '''\cf0\par
23         self._extract.append(str)\par
24 \par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def extract.Extract.display_extract (  \i self\i0 )\par

\pard\widctlpar\li360\sb30\sa60\qj\b0\f1\fs22\par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16         DESCRIPTION:\par

\pard\widctlpar\li360\sb30\sa60\qj             Informa todas as opera\'e7\'f5es realizadas na conta\f1\fs22  \par

\pard\cbpat5\shading1000\widctlpar\li360\f2\fs16 25     \cf1 def \cf0 display_extract(self):\par
26         \cf2 '''\cf0\par
27 \cf2         DESCRIPTION:\cf0\par
28 \cf2             Informa todas as opera\'e7\'f5es realizadas na conta\cf0\par
29 \cf2         '''\cf0\par
30         text = \cf2 ''\cf0\par
31         text += \cf2 'Data de abertura \{\}\\n'\cf0 .format(self._open_date)\par
32         text += \cf2 'Transa\'e7\'f5es: \\n'\cf0\par
33         \cf1 for\cf0  t \cf1 in\cf0  self._extract:\par
34             text += \cf2 ' '\cf0  + t\par
35         \cf1 return\cf0  text\par

\pard\keepn\widctlpar\s4\sb240\sa60\b\f0\fs20 def extract.Extract.openDate (  \i self\i0 )\par

\pard\cbpat5\shading1000\widctlpar\li360\b0\f2\fs16 15     \cf1 def \cf0 openDate(self):\par
16         \cf1 return\cf0  self._open_date\par
17 \par

\pard\brdrb\brdrs\brdrw5\brsp20 \widctlpar\b\f0\fs20\par

\pard\keepn\widctlpar\s4\sb240\sa60 A documenta\'e7\'e3o para essa classe foi gerada a partir do seguinte arquivo:\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li720\b0\f1 E:/2020.2 quarentena/github/Projeto_PooII/servidor/\b extract.py\b0\par

\pard\fs24\par

\pard\keepn\s1\sb240\sa60\kerning36\b\f0\fs36 Arquivos\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\fs28 Refer\'eancia do Arquivo E:/2020.2 quarentena/github/Projeto_PooII/servidor/account.py\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b account.Account\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 <em>Namespaces</em>\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20  \b account\b0\par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia do Arquivo E:/2020.2 quarentena/github/Projeto_PooII/servidor/bank.py\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b bank.Bank\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 <em>Namespaces</em>\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20  \b bank\b0\par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia do Arquivo E:/2020.2 quarentena/github/Projeto_PooII/servidor/client.py\par
\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b client.Client\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 <em>Namespaces</em>\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20  \b client\b0\par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia do Arquivo E:/2020.2 quarentena/github/Projeto_PooII/servidor/extract.py\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b extract.Extract\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 <em>Namespaces</em>\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20  \b extract\b0\par

\pard\fs24\par
\par

\pard\keepn\widctlpar\s2\sb240\sa60\kerning28\b\f0\fs28 Refer\'eancia do Arquivo E:/2020.2 quarentena/github/Projeto_PooII/servidor/serve.py\par

\pard\keepn\widctlpar\s3\sb240\sa60\kerning0\fs24 Componentes\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 class \b serve.conectServ\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 <em>Namespaces</em>\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20  \b serve\b0\par

\pard\keepn\widctlpar\s3\sb240\sa60\b\f0\fs24 Vari\'e1veis\par

\pard 
{\pntext\f1 0)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart0\pndec{\pntxta)}}
\widctlpar\fi-360\li360\b0\f1\fs20 string \b serve.host\b0  = 'localhost'\par
{\pntext\f1 1)\tab}int \b serve.port\b0  = 8000\par
{\pntext\f1 2)\tab}\b serve.serv\b0  = conectServ()\par
{\pntext\f1 3)\tab}bool \b serve.runing\b0  = True\par

\pard\fs24\par

\pard\keepn\s1\sb240\sa60\kerning36\b\f0\fs36 Sum\'e1rio\par

\pard\sa200\sl276\slmult1\kerning0\b0\f1\fs24 INDEX\par
}
 